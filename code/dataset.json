{
  "q": [
    {
      "questionid": "1",
      "difficulty": "1Easy",
      "description": "",
      "wrongcodefile": "1wrongcode.cpp",
      "rightcodefile": "1rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\n\n\nclass Solution\n{\n    public:\n    bool ispar(string x)\n    {\n        stack<int> s;\n        int i=0;\n        while(i<x.size()){\n            if(x[i]=='('||x[i]=='{'||x[i]=='['){\n                if(x[i]=='('){\n                    s.push(-1);\n                }\n                if(x[i]=='['){\n                    s.push(0);\n                }\n                if(x[i]=='{'){\n                    s.push(1);\n                }\n            }\n            else{\n                if(s.size()==0){\n                    return false;\n                }\n                else{\n                    if(x[i]==')'&&s.top()!=-1){\n                        return false;\n                    }\n                    if(x[i]==']'&&s.top()!=0){\n                        return false;\n                    }\n                    if(x[i]=='}'&&s.top()!=1){\n                        return false;\n                    }\n                    s.pop();\n                }\n            }\n            i++;\n        }\n\n        return true;\n    }\n\n};\n\n\nint main()\n{\n   string a;\n       cin>>a;\n       Solution obj;\n       if(obj.ispar(a))\n        cout<<\"balanced\"<<endl;\n       else\n        cout<<\"not balanced\"<<endl;\n}",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\n\nclass Solution\n{\n    public:\n    bool ispar(string x)\n    {\n        stack<int> s;\n        int i=0;\n        while(i<x.size()){\n            if(x[i]=='('||x[i]=='{'||x[i]=='['){\n                if(x[i]=='('){\n                    s.push(-1);\n                }\n                if(x[i]=='['){\n                    s.push(0);\n                }\n                if(x[i]=='{'){\n                    s.push(1);\n                }\n            }\n            else{\n                if(s.size()==0){\n                    return false;\n                }\n                else{\n                    if(x[i]==')'&&s.top()!=-1){\n                        return false;\n                    }\n                    if(x[i]==']'&&s.top()!=0){\n                        return false;\n                    }\n                    if(x[i]=='}'&&s.top()!=1){\n                        return false;\n                    }\n                    s.pop();\n                }\n            }\n            i++;\n        }\n        if(s.empty()){\n            return true;\n        }\n        return false;\n    }\n\n};\n\n\nint main()\n{\n   string a;\n       cin>>a;\n       Solution obj;\n       if(obj.ispar(a))\n        cout<<\"balanced\"<<endl;\n       else\n        cout<<\"not balanced\"<<endl;\n}"
    },
    {
      "questionid": "2",
      "difficulty": "2Hard",
      "description": "",
      "wrongcodefile": "2wrongcode.cpp",
      "rightcodefile": "2rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\nint countRev (string s);\n\nint main()\n{\n    string s; \n    cin >> s;\n    cout << countRev (s) << '\\n';\n}\n\nint countRev (string s)\n{\n    stack<char> st;\n    if(s.size()%2!=0){\n        return -1;\n    }\n    for(int i=0;i<s.size();i++){\n        if(st.empty()){\n            st.push(s[i]);\n        }\n        else{\n            if(st.top()=='{'&&s[i]=='}'){\n                st.pop();\n            }else{\n                st.push(s[i]);\n            }\n        }\n    }\n\n    return st.size()/2;\n}",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\nint countRev (string s);\n\nint main()\n{\n    string s; \n    cin >> s;\n    cout << countRev (s) << '\\n';\n}\n\nint countRev (string s){\n    stack<char> st;\n\n    if(s.size()%2!=0){\n        return -1;\n    }\n\n    for(int i=0;i<s.size();i++){\n        if(st.empty()){\n            st.push(s[i]);\n        }\n        else{\n            if(st.top()=='{'&&s[i]=='}'){\n                st.pop();\n            }else{\n                st.push(s[i]);\n            }\n        }\n    }\n\n    int count=0;\n\n    while(!st.empty()){\n        char top=st.top();\n        st.pop();\n        if(st.top()==top){\n            count=count+1;\n        }\n        else{\n           count= count+2;\n        }\n        st.pop();\n    }\n    return count;\n}"
    },
    {
      "questionid": "3",
      "difficulty": "3Hard",
      "description": "",
      "wrongcodefile": "3wrongcode.cpp",
      "rightcodefile": "3rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack> \nusing namespace std; \n\n\nclass Solution{\n    public:\n    void helper(string& S, int index,string& ans){\n        if(index==S.size()-1){\n            if(S[index]==S[index-1]){\n                ans.push_back(S[index]);\n            }\n            return;\n        }\n        if(index==S.size()-1){\n            ans.push_back(S[index]);\n            return;\n        }\n        if(S[index]==S[index+1]){\n            helper(S,index+1,ans);\n        }\n        else{\n            ans.push_back(S[index]);\n            helper(S,index+1,ans);\n            return ;\n        }\n    }\n    string removeConsecutiveCharacter(string S)\n    {\n        string ans;\n         helper(S,0,ans);\n         return ans;\n    }\n};\n\n\nint main() \n{ \n        string s;\n        cin>>s;\n        Solution ob;\n        cout<<ob.removeConsecutiveCharacter(s)<<endl;\n} ",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std; \n\n\n\nclass Solution{\n    public:\n    void helper(string& S, int index,string& ans){\n        if(index==S.size()-1){\n            ans.push_back(S[index]);\n            return;\n        }\n        if(S[index]==S[index+1]){\n            helper(S,index+1,ans);\n        }\n        else{\n            ans.push_back(S[index]);\n            helper(S,index+1,ans);\n            return ;\n        }\n    }\n    string removeConsecutiveCharacter(string S)\n    {\n        string ans;\n         helper(S,0,ans);\n         return ans;\n    }\n};\n\n\nint main() \n{ \n        string s;\n        cin>>s;\n        Solution ob;\n        cout<<ob.removeConsecutiveCharacter(s)<<endl;\n} "
    },
    {
      "questionid": "4",
      "difficulty": "4Hard",
      "description": "",
      "wrongcodefile": "4wrongcode.cpp",
      "rightcodefile": "4rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> ans;\n    bool valid(string s){\n        if(s[0]=='0'){\n            return false;\n        }\n        int v=stoi(s);\n        if(v>255){\n            return false;\n        }\n        return true;\n    }\n    void helper(string &s,int i,int part,string res){\n        if(s.size()==i||part==4){\n            if(s.size()==i&&part==4){\n                ans.push_back(res.substr(0,res.size()-1));\n                return;\n            }\n            return;\n        }\n        if(s.size()-i>=1&&valid(s.substr(i,1))){\n              helper(s,i+1,part+1,res+s[i]+\".\");\n        }\n        if(s.size()-i>=2&&valid(s.substr(i,2))){\n              helper(s,i+2,part+1,res+s.substr(i,2)+\".\");\n        }\n        if(s.size()-i>=3&&valid(s.substr(i,3))){\n              helper(s,i+3,part+1,res+s.substr(i,3)+\".\");\n        }\n        return;\n    }\n    vector<string> restoreIpAddresses(string s) {\n        helper(s,0,0,\"\");\n        return ans;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    vector<string>v;\n    Solution ob;\n    v=ob.restoreIpAddresses(s);\n    int n=v.size();\n    for(int i=0;i<n;i++){\n        cout<<v[i];\n    }\n    cout<<endl;\n    return 0;\n}",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> ans;\n    bool valid(string s){\n        if(s[0]=='0'){\n            return false;\n        }\n        int v=stoi(s);\n        if(v>255){\n            return false;\n        }\n        return true;\n    }\n    void helper(string &s,int i,int part,string res){\n        if(s.size()==i||part==4){\n            if(s.size()==i&&part==4){\n                ans.push_back(res.substr(0,res.size()-1));\n                return;\n            }\n            return;\n        }\n\n        helper(s,i+1,part+1,res+s[i]+\".\");\n        \n        if(s.size()-i>=2&&valid(s.substr(i,2))){\n              helper(s,i+2,part+1,res+s.substr(i,2)+\".\");\n        }\n        \n        if(s.size()-i>=3&&valid(s.substr(i,3))){\n              helper(s,i+3,part+1,res+s.substr(i,3)+\".\");\n        }\n        return;\n    }\n    vector<string> restoreIpAddresses(string s) {\n        helper(s,0,0,\"\");\n        return ans;\n    }\n};\n\n\nint main(){\n    string s;\n    cin>>s;\n    vector<string>v;\n    Solution ob;\n    v=ob.restoreIpAddresses(s);\n    int n=v.size();\n    for(int i=0;i<n;i++){\n        cout<<v[i];\n    }\n    cout<<endl;\n    return 0;\n}"
    },
    {
      "questionid": "5",
      "difficulty": "5Hard",
      "description": "",
      "wrongcodefile": "5wrongcode.cpp",
      "rightcodefile": "5rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\nclass Solution {\n    public:\n        bool canBeValid(string s, string l) {\n        stack<int>st;\n        int n=s.size();\n        if(n%2!=0){\n            return false;\n        }\n        for(int i=0;i<n;i++){\n            if(s[i]==')'&&!st.empty()&&s[st.top()]=='('){\n                st.pop();\n                continue;\n            }\n            else{\n                st.push(i);\n            }\n        }\n        if(st.size()%2!=0){\n            return false;\n        }\n        while(!st.empty()){\n            char a=s[st.top()];\n            int i=st.top();\n            st.pop();\n            char b=s[st.top()];\n            int j=st.top();\n            if(a==b){\n                if(a=='('){\n                    if(l[i]!='0'||l[j]!='0'){\n                        return false;\n                    }\n                }\n                else{\n                     if(l[j]!='0'){\n                        return false;\n                    }\n                }\n            }\n            else{\n                if(l[j]!='0'){\n                    return false;\n                }\n            }\n            st.pop();\n        }\n        return true;\n    }\n};\nint main() {\n    \n    string s;\n    cin>>s;\n    string l;\n    cin>>l;\n    Solution ob;\n    cout<<ob.canBeValid(s,l)<<endl;\n} ",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\nusing namespace std;\n\nclass Solution {\npublic:\n     bool canBeValid(string s, string l) {\n         int n=s.size();\n         if(n%2!=0){\n             return false;\n         }\n         int e=0;\n         int b=0;\n         for(int i=0;i<n;i++){\n             if(l[i]=='0'){\n                 e++;\n             }\n             else{\n                 b+=(s[i]=='(' ? 1 : -1);\n                 if(b==-1){\n                     b=0;\n                     if(e==0){\n                         return false;\n                     }\n                     else{\n                         e++;\n                     }\n                 }\n             }\n         }\n         e=0;\n         b=0;\n         for(int i=n-1;i>=0;i--){\n             if(l[i]=='0'){\n                 e++;\n             }\n             else{\n                 b+=(s[i]==')' ? 1:-1);\n                 if(b==-1){\n                     b=0;\n                     if(e==0){\n                         return false;\n                     }\n                     else{\n                         e--;\n                     }\n                 }\n             }\n         }\n         return true;\n\n    }\n};\nint main() \n{ \n    string s;\n    cin>>s;\n    string l;\n    cin>>l;\n    Solution ob;\n    cout<<ob.canBeValid(s,l)<<endl;\n} "
    },
    {
      "questionid": "6",
      "difficulty": "6Medium",
      "description": "",
      "wrongcodefile": "6wrongcode.cpp",
      "rightcodefile": "6rightcode.cpp",
      "wrongcode": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Node\n{\n    int data;\n    struct Node *left;\n    struct Node *right;\n\n    Node(int val) {\n        data = val;\n        left = right = NULL;\n    }\n}; \n\nNode* buildTree(string str)\n{   \n    if(str.length() == 0 || str[0] == 'N')\n        return NULL;\n    \n    vector<string> ip;\n    \n    istringstream iss(str);\n    for(string str; iss >> str; )\n        ip.push_back(str);\n        \n    Node *root = new Node(stoi(ip[0]));\n        \n    queue<Node*> queue;\n    queue.push(root);\n        \n    int i = 1;\n    while(!queue.empty() && i < ip.size()) {\n        Node* currNode = queue.front();\n        queue.pop();\n            \n        string currVal = ip[i];\n            \n        if(currVal != \"N\") {\n            currNode->left = new Node(stoi(currVal));\n                \n            queue.push(currNode->left);\n        }\n            \n        i++;\n        if(i >= ip.size())\n            break;\n        currVal = ip[i];\n            \n        if(currVal != \"N\") {\n            currNode->right = new Node(stoi(currVal));\n                \n            queue.push(currNode->right);\n        }\n        i++;\n    }\n    \n    return root;\n}\n\n\n\nclass Solution {\npublic:\n    int count(Node* root){\n        if(root==NULL){\n            return 0;\n        }\n        return 1+count(root->left)+count(root->right);\n    }\n    int hight(Node* root){\n        if(root==NULL){\n            return 0;\n        }\n        return 1+min(hight(root->left),hight(root->right));\n    }\n    int minDepth(Node* root) {\n        if(root==NULL){\n            return 0;\n        }\n        int c=count(root);\n            int h=hight(root);\n        if(h==1){\n            return c;\n        }\n        return h;\n    }\n};;\n\nint main()\n{\n    string treeString;\n\tgetline(cin,treeString);\n\tNode* root = buildTree(treeString);\n    Solution ob;\n\tcout<<ob.minDepth(root)<<endl;\n    return 0;\n} ",
      "rightcode": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Node\n{\n    int data;\n    struct Node *left;\n    struct Node *right;\n\n    Node(int val) {\n        data = val;\n        left = right = NULL;\n    }\n}; \n\n\nNode* buildTree(string str)\n{   \n    if(str.length() == 0 || str[0] == 'N')\n        return NULL;\n    \n    vector<string> ip;\n    \n    istringstream iss(str);\n    \n    for(string str; iss >> str; )\n        ip.push_back(str);\n        \n    Node *root = new Node(stoi(ip[0]));\n        \n    queue<Node*> queue;\n    queue.push(root);\n        \n    int i = 1;\n    while(!queue.empty() && i < ip.size()) {\n        Node* currNode = queue.front();\n        queue.pop();\n            \n        string currVal = ip[i];\n            \n        if(currVal != \"N\") {\n            currNode->left = new Node(stoi(currVal));\n            \n            queue.push(currNode->left);\n        }\n            \n        i++;\n        if(i >= ip.size())\n            break;\n        currVal = ip[i];\n            \n        if(currVal != \"N\") {\n            currNode->right = new Node(stoi(currVal));\n                \n            queue.push(currNode->right);\n        }\n        i++;\n    }\n    \n    return root;\n}\n\n\nclass Solution {\npublic:\n    int minDepth(Node* root) {\n        if(root==NULL){\n            return 0;\n        }\n        if(root->left==NULL&&root->right==NULL){\n            return 1;\n        }\n        if(root->left==NULL){\n            return 1+minDepth(root->right);\n        }\n        if(root->right==NULL){\n            return 1+minDepth(root->left);\n        }\n        return 1+min(minDepth(root->left),minDepth(root->right));\n    }\n};;\n\n\nint main()\n{\n        string treeString;\n\t\tgetline(cin,treeString);\n\t\tNode* root = buildTree(treeString);\n        Solution ob;\n\t\tcout<<ob.minDepth(root)<<endl;\n    return 0;\n} "
    },
    {
      "questionid": "7",
      "difficulty": "7Medium",
      "description": "",
      "wrongcodefile": "7wrongcode.cpp",
      "rightcodefile": "7rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nstring removeDuplicateLetters(string s) {\n        int n=s.size();\n        unordered_map<int,int>m;\n        for(int i=0;i<n;i++){\n            if(!m.count(s[i])){\n                m[s[i]]++;\n            }\n            else{\n                m[s[i]]=1;\n            }\n        }\n        stack<char>st;\n        bool arr[26]={0};\n        for(int i=0;i<n;i++){\n            if(st.empty()){\n                m[s[i]]--;\n                st.push(s[i]);\n                continue;\n            }\n            while(!st.empty()&&s[i]<=st.top()&&m[st.top()]!=0&&!arr[s[i]-'a']){\n                arr[st.top()-'a']=0;\n                st.pop(); \n            }\n            if(!arr[s[i]-'a']){\n                 st.push(s[i]);\n                 arr[s[i]-'a']=1;\n            }\n            m[s[i]]--;\n        }\n        string ans=\"\";\n        while(!st.empty()){\n            ans.push_back(st.top());\n            st.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n}\n\nint main(){\n    string s;\n    cin>>s;\n    string k=removeDuplicateLetters(s);\n    cout<<k;\n    \n}\n",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nstring removeDuplicateLetters(string s) {\n        int n=s.size();\n\n        unordered_map<int,int>m;\n        for(int i=0;i<n;i++){\n            if(!m.count(s[i])){\n                m[s[i]]++;\n            }\n            else{\n                m[s[i]]=1;\n            }\n        }\n        \n        stack<char>st;\n        bool arr[26]={0};\n        for(int i=0;i<n;i++){\n            if(st.empty()){\n                m[s[i]]--;\n                st.push(s[i]);\n                continue;\n            }\n            while(!st.empty()&&s[i]<=st.top()&&m[st.top()]!=0&&!arr[s[i]-'a']){\n                arr[st.top()-'a']=0;\n                \n                st.pop(); \n            }\n            if(!arr[s[i]-'a']){\n                 st.push(s[i]);\n                 arr[s[i]-'a']=1;\n            }\n            m[s[i]]--;\n        }\n        string ans=\"\";\n        while(!st.empty()){\n            ans.push_back(st.top());\n            st.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n}\n\nint main(){\n    string s;\n    cin>>s;\n    string k=removeDuplicateLetters(s);\n    cout<<k;\n    \n}\n"
    },
    {
      "questionid": "8",
      "difficulty": "8Medium",
      "description": "",
      "wrongcodefile": "8wrongcode.cpp",
      "rightcodefile": "8rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        stack<char>st;\n        int n=s.size();\n        for(int i=0;i<n;i++){\n            if(st.empty()){\n                st.push(s[i]);\n                continue;\n            }\n            if(s[i]=='#'){\n                st.pop();\n                continue;\n            }\n            st.push(s[i]);\n        }\n        string ans1=\"\";\n        while(!st.empty()){\n            ans1.push_back(st.top());\n            st.pop();\n        }\n        int m=t.size();\n        for(int i=0;i<m;i++){\n            if(st.empty()){\n                if(t[i]=='#'){\n                    continue;\n                }\n                st.push(t[i]);\n                continue;\n            }\n            if(t[i]=='#'){\n                st.pop();\n                continue;\n            }\n            st.push(t[i]);\n        }\n        string ans2=\"\";\n        while(!st.empty()){\n            ans2.push_back(st.top());\n            st.pop();\n        }\n        if(ans1==ans2){\n            return true;\n        }\n        return false;\n    }\n};\n\nint main(){\n    Solution ob;\n    string s;\n    string t;\n    cin>>s;\n    cin>>t;\n    cout<<ob.backspaceCompare(s,t);  \n}",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        stack<char>st;\n        int n=s.size();\n        for(int i=0;i<n;i++){\n            if(st.empty()){\n                if(s[i]=='#'){\n                    continue;\n                }\n                st.push(s[i]);\n                continue;\n            }\n            if(s[i]=='#'){\n                st.pop();\n                continue;\n            }\n            st.push(s[i]);\n        }\n        string ans1=\"\";\n        while(!st.empty()){\n            ans1.push_back(st.top());\n            st.pop();\n        }\n        int m=t.size();\n        for(int i=0;i<m;i++){\n            if(st.empty()){\n                if(t[i]=='#'){\n                    continue;\n                }\n                st.push(t[i]);\n                continue;\n            }\n            if(t[i]=='#'){\n                st.pop();\n                continue;\n            }\n            st.push(t[i]);\n        }\n        string ans2=\"\";\n        while(!st.empty()){\n            ans2.push_back(st.top());\n            st.pop();\n        }\n        if(ans1==ans2){\n            return true;\n        }\n        return false;\n    }\n};\n\nint main(){\n    Solution ob;\n    string s;\n    string t;\n    cin>>s;\n    cin>>t;\n    cout<<ob.backspaceCompare(s,t); \n    \n}"
    },
    {
      "questionid": "9",
      "difficulty": "9Medium",
      "description": "",
      "wrongcodefile": "9wrongcode.cpp",
      "rightcodefile": "9rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    string removeKdigits(string num, int k){\n        int n=num.size();\n        stack<int>s;\n        if(num.size()==k){\n            return \"0\";\n        }\n        for(int i=0;i<n;i++){\n            if(s.empty()){\n                s.push(num[i]);\n                continue;\n            }\n            else{\n                if(s.top()>num[i]){\n                    while(!s.empty()&&s.top()>num[i]&&k!=0){\n                        s.pop();\n                        k--;\n                    }\n                }\n            }\n             s.push(num[i]);\n        }\n        string ans=\"\";\n        while(!s.empty()){\n            ans.push_back(s.top());\n            s.pop();\n        }\n        while(ans.size()!=0&&ans.back()=='0'){\n            ans.pop_back();\n        }\n        reverse(ans.begin(),ans.end());\n        \n        if(ans.size()==0||k>ans.size()){\n            return \"0\";\n        }\n        return ans;\n    }\n};\n\n\nint main(){\n    string s;\n    cin>>s;\n    int k;\n    cin>>k;\n    if(k>s.size()){\n        cout<<\"NOT Possible\";\n    }\n    Solution ob;\n    cout<<ob.removeKdigits(s,k);\n    return 0;\n}\n",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    string removeKdigits(string num, int k){\n        int n=num.size();\n        stack<int>s;\n        if(num.size()==k){\n            return \"0\";\n        }\n        for(int i=0;i<n;i++){\n            if(s.empty()){\n                s.push(num[i]);\n                continue;\n            }\n            else{\n                if(s.top()>num[i]){\n                    while(!s.empty()&&s.top()>num[i]&&k!=0){\n                        s.pop();\n                        k--;\n                    }\n                }\n            }\n             s.push(num[i]);\n        }\n        string ans=\"\";\n        while(!s.empty()){\n            ans.push_back(s.top());\n            s.pop();\n        }\n        while(ans.size()!=0&&ans.back()=='0'){\n            ans.pop_back();\n        }\n        reverse(ans.begin(),ans.end());\n        \n        if(ans.size()==0||k>ans.size()){\n            return \"0\";\n        }\n\n        for(int i=0;i<k;i++){\n            ans.pop_back();\n        }\n        return ans;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    int k;\n    cin>>k;\n    if(k>s.size()){\n        cout<<\"NOT Possible\";\n    }\n    Solution ob;\n    cout<<ob.removeKdigits(s,k);\n    return 0;\n}\n"
    },
    {
      "questionid": "10",
      "difficulty": "10Medium",
      "description": "",
      "wrongcodefile": "10wrongcode.cpp",
      "rightcodefile": "10rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    string makeGood(string s) {\n        stack<int>st;\n        int n=s.size();\n        for(int i=0;i<n;i++){\n            if(st.size()==0){\n                  st.push(s[i]);\n            }\n            else{\n                if(abs(s[i]-st.top())==32){\n                    st.top();\n                 }\n                 else{\n                     st.push(s[i]);\n                 }\n            }\n        }\n        string ans=\"\";\n        while(!st.empty()){\n            ans.push_back(char(st.top()));\n            st.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    Solution ob;\n    cout<<ob.makeGood(s);\n    return 0;\n}",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    string makeGood(string s) {\n        stack<int>st;\n        int n=s.size();\n        for(int i=0;i<n;i++){\n            if(st.size()==0){\n                  st.push(s[i]);\n            }\n            else{\n                if(abs(s[i]-st.top())==32){\n                    if(s[i]>='A'&&s[i]<='Z'||char(st.top())>='A'&&char(st.top())<='z'){\n                         st.pop();\n                    }\n                 }\n                 else{\n                     st.push(s[i]);\n                 }\n            }\n        }\n        string ans=\"\";\n        while(!st.empty()){\n            ans.push_back(char(st.top()));\n            st.pop();\n        }\n        reverse(ans.begin(),ans.end());\n        return ans;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    Solution ob;\n    cout<<ob.makeGood(s);\n    return 0;\n}\n\n\n"
    },
    {
      "questionid": "11",
      "difficulty": "11Medium",
      "description": "",
      "wrongcodefile": "11wrongcode.cpp",
      "rightcodefile": "11rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\n\nstruct Node {\n    int val;\n    struct Node* next;\n    Node(int x) {\n        val = x;\n        next = NULL;\n    }\n};\n\nstruct Node* buildList(int size)\n{\n    int val;\n    cin>> val;\n    \n    Node* head = new Node(val);\n    Node* tail = head;\n    \n    for(int i=0; i<size-1; i++)\n    {\n        cin>> val;\n        tail->next = new Node(val);\n        tail = tail->next;\n    }\n    \n    return head;\n}\n\nvoid printList(Node* n)\n{\n    while(n)\n    {\n        cout<< n->val << \" \";\n        n = n->next;\n    }\n    cout<< endl;\n}\n\n\nclass Solution\n{\n    public:\n    struct Node* addTwoLists(struct Node* l1, struct Node* l2)\n    {\n        stack<int>s1;\n        stack<int>s2;\n        struct Node* h1=l1;\n        struct Node* h2=l2;\n        while(h1){\n            s1.push(l1->val);\n            h1=h1->next;\n            l1=l1->next;\n        }\n         while(h2){\n            s2.push(l2->val);\n            h2=h2->next;\n            l2=l2->next;\n        }\n        int rem=0;\n        stack<int>s;\n        while(!s1.empty()&&!s2.empty()){\n            int k=s1.top()+s2.top()+rem;\n            if(k>9){\n                s.push(k%10);\n                rem=1;\n            }\n            else{\n                s.push(k);\n                rem=0;\n            }\n            s1.pop();\n            s2.pop();\n        }\n        while(!s1.empty()){\n            int k=(rem+s1.top());\n            if(k>9){\n                 s.push(k%10);\n                rem=1;\n            }\n            else{\n                 s.push(k);\n                rem=0;\n            }\n                   s1.pop();\n        }\n        while(!s2.empty()){\n            int k=(rem+s2.top());\n            if(k>9){\n                 s.push(k%10);\n                rem=1;\n            }\n            else{\n                 s.push(k);\n                rem=0;\n            }\n            s2.pop();\n        }\n        struct Node* head=NULL;\n        struct Node* tail=NULL;\n        while(!s.empty()){\n            struct Node* temp=new Node(s.top());\n            if(head==NULL){\n                head=temp;\n                tail=temp; \n            }\n            else{\n                tail->next=temp;\n                tail=tail->next;\n            }\n            s.pop();\n        }\n        return head;\n    }\n};\n\n\nint main()\n{\n    int n, m;\n    \n    cin>>n;\n    Node* first = buildList(n);\n    \n    cin>>m;\n    Node* second = buildList(m);\n    Solution ob;\n    Node* res = ob.addTwoLists(first,second);\n    printList(res);\n    \n    return 0;\n}\n\n",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<unordered_map>\nusing namespace std;\n\nstruct Node {\n    int val;\n    struct Node* next;\n    Node(int x) {\n        val = x;\n        next = NULL;\n    }\n};\n\nstruct Node* buildList(int size)\n{\n    int val;\n    cin>> val;\n    \n    Node* head = new Node(val);\n    Node* tail = head;\n    \n    for(int i=0; i<size-1; i++)\n    {\n        cin>> val;\n        tail->next = new Node(val);\n        tail = tail->next;\n    }\n    \n    return head;\n}\n\nvoid printList(Node* n)\n{\n    while(n)\n    {\n        cout<< n->val << \" \";\n        n = n->next;\n    }\n    cout<< endl;\n}\n\n\nclass Solution\n{\n    public:\n    struct Node* addTwoLists(struct Node* l1, struct Node* l2)\n    {\n        stack<int>s1;\n        stack<int>s2;\n        struct Node* h1=l1;\n        struct Node* h2=l2;\n        while(h1){\n            s1.push(l1->val);\n            h1=h1->next;\n            l1=l1->next;\n        }\n         while(h2){\n            s2.push(l2->val);\n            h2=h2->next;\n            l2=l2->next;\n        }\n        int rem=0;\n        stack<int>s;\n        while(!s1.empty()&&!s2.empty()){\n            int k=s1.top()+s2.top()+rem;\n            if(k>9){\n                s.push(k%10);\n                rem=1;\n            }\n            else{\n                s.push(k);\n                rem=0;\n            }\n            s1.pop();\n            s2.pop();\n        }\n        while(!s1.empty()){\n            int k=(rem+s1.top());\n            if(k>9){\n                 s.push(k%10);\n                rem=1;\n            }\n            else{\n                 s.push(k);\n                rem=0;\n            }\n                   s1.pop();\n        }\n        while(!s2.empty()){\n            int k=(rem+s2.top());\n            if(k>9){\n                 s.push(k%10);\n                rem=1;\n            }\n            else{\n                 s.push(k);\n                rem=0;\n            }\n            s2.pop();\n        }\n        if(rem>0){\n            s.push(rem);\n        }\n        struct Node* head=NULL;\n        struct Node* tail=NULL;\n        while(!s.empty()){\n            struct Node* temp=new Node(s.top());\n            if(head==NULL){\n                head=temp;\n                tail=temp; \n            }\n            else{\n                tail->next=temp;\n                tail=tail->next;\n            }\n            s.pop();\n        }\n        return head;\n    }\n};\n\n\n\nint main()\n{\n    int n, m;\n    \n    cin>>n;\n    Node* first = buildList(n);\n    \n    cin>>m;\n    Node* second = buildList(m);\n    Solution ob;\n    Node* res = ob.addTwoLists(first,second);\n    printList(res);\n    \n    return 0;\n}\n"
    },
    {
      "questionid": "12",
      "difficulty": "12Medium",
      "description": "",
      "wrongcodefile": "12wrongcode.cpp",
      "rightcodefile": "12rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool checkValidString(string s) {\n        stack<int>open;\n        stack<int>star;\n        int n=s.size();\n        for(int i=0;i<n;i++){\n            if(s[i]=='('){\n                open.push(i);\n            }\n            else if(s[i]=='*'){\n                star.push(i);\n            }\n            else{\n                if(!open.empty()){\n                    open.pop();\n                }\n                else if(!star.empty()){\n                    star.pop();\n                }\n                else{\n                    return false;\n                }\n            }\n        }\n        while(!open.empty()){\n            if(star.empty()){\n                return false;\n            }\n            open.pop();\n            star.pop();\n        }\n        return true;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    Solution ob;\n    cout<<ob.checkValidString(s);\n    return 0;\n}\n\n\n",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool checkValidString(string s) {\n        stack<int>open;\n        stack<int>star;\n        int n=s.size();\n        for(int i=0;i<n;i++){\n            if(s[i]=='('){\n                open.push(i);\n            }\n            else if(s[i]=='*'){\n                star.push(i);\n            }\n            else{\n                if(!open.empty()){\n                    open.pop();\n                }\n                else if(!star.empty()){\n                    star.pop();\n                }\n                else{\n                    return false;\n                }\n            }\n        }\n        while(!open.empty()){\n            if(star.empty()){\n                return false;\n            }\n            else if(open.top()<star.top()){\n                open.pop();\n                star.pop();\n            }\n            else{\n                return false;\n            }\n        }\n        \n        return true;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    Solution ob;\n    cout<<ob.checkValidString(s);\n    return 0;\n}\n\n\n"
    },
    {
      "questionid": "13",
      "difficulty": "13Medium",
      "description": "",
      "wrongcodefile": "13wrongcode.cpp",
      "rightcodefile": "13rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<map>\n#include<bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    unordered_map<string ,bool>map;\n    bool valid(string s){\n        if(map[s]){\n            return true;\n        }\n        return false;\n    }\n    vector<string>ans;\n    void helper(string&s,int i,string temp){\n        if(i==s.size()){\n            ans.push_back(temp);\n            return ;\n        }\n        for(int j=i;j<s.size();j++){\n            if(valid(s.substr(i,j-i+1))){\n                if(i!=0){\n                    temp+=\" \";\n                }\n\n                helper(s,j+1,temp+s.substr(i,j-i+1));\n            }\n        }\n        return ;\n    }\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n  \n        for(int i=0;i<wordDict.size();i++){\n            map[wordDict[i]]=true;\n        }\n        helper(s,0,\"\");\n        return ans;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    vector<string>dic;\n    int l;\n    cin>>l;\n    for(int i=0;i<l;i++){\n        string st;\n        cin>>st;\n        dic.push_back(st);\n    }\n    Solution ob;\n    vector<string> ans=ob.wordBreak(s,dic);\n    for(int i=0;i<ans.size();i++){\n        cout<<ans[i]<<\" \";\n    }\n    return 0;\n}",
      "rightcode": "#include<iostream>\n#include<map>\n#include<bits/stdc++.h>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    unordered_map<string ,bool>map;\n    bool valid(string s){\n        if(map[s]){\n            return true;\n        }\n        return false;\n    }\n    vector<string>ans;\n    void helper(string&s,int i,string temp){\n        if(i==s.size()){\n            ans.push_back(temp);\n            return ;\n        }\n        for(int j=i;j<s.size();j++){\n            if(valid(s.substr(i,j-i+1))){\n                if(temp.size()!=0){\n                    if(temp[temp.size()-1]!=' '){\n                         temp+=\" \";\n                    }\n                }\n                \n                helper(s,j+1,temp+s.substr(i,j-i+1));\n            }\n        }\n        return ;\n    }\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n  \n        for(int i=0;i<wordDict.size();i++){\n            map[wordDict[i]]=true;\n        }\n        helper(s,0,\"\");\n        return ans;\n    }\n};\n\nint main(){\n    string s;\n    cin>>s;\n    vector<string>dic;\n    int l;\n    cin>>l;\n    for(int i=0;i<l;i++){\n        string st;\n        cin>>st;\n        dic.push_back(st);\n    }\n    Solution ob;\n    vector<string> ans=ob.wordBreak(s,dic);\n    for(int i=0;i<ans.size();i++){\n        cout<<ans[i]<<\" \";\n    }\n    return 0;\n}"
    },
    {
      "questionid": "14",
      "difficulty": "14Medium",
      "description": "",
      "wrongcodefile": "14wrongcode.cpp",
      "rightcodefile": "14rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<stack>\n#include<vector>\n#include<cstring>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int trap(vector<int>& h) {\n        stack<int>s;\n        int n=h.size();\n        vector<int>t(h.size(),-1);\n        for(int i=0;i<n;i++){\n            if(s.empty()){\n                s.push(i);\n            }\n            else{\n                if(h[i]>=h[s.top()]){\n                    while((!s.empty())&&h[i]>=h[s.top()]){\n                        t[s.top()]=i;\n                        s.pop();\n                    }\n                }\n                s.push(i);\n            }\n        }\n        while(!s.empty()){\n            t[s.top()]=-1;\n            s.pop();\n        }\n        int maxm=-1;\n        int curr=0;\n        for(int i=0;i<n;i++){\n            int j=i+1;\n            for(;j<t[i];j++){\n                curr+=abs(h[i]-h[j]);\n            }\n            i=j-1;\n        }\n        return curr;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    vector<int>v;\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        v.push_back(k);\n    }\n    cout<<ob.trap(v);\n}",
      "rightcode": "#include<iostream>\n#include<stack>\n#include<vector>\n#include<cstring>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int trap(vector<int>& h) {\n        int n=h.size();\n        vector<int>maxl(n);\n        vector<int>maxr(n);\n        int m=h[0];\n        for(int i=0;i<n;i++){\n            m=max(m,h[i]);\n            maxl[i]=m;\n        }\n        m=h[n-1];\n        cout<<endl;\n        for(int i=n-1;i>=0;i--){\n            m=max(m,h[i]);\n            maxr[i]=m;\n        }\n        int ans=0;\n        for(int i=0;i<n;i++){\n            ans+=min(maxl[i],maxr[i])-h[i];\n        }\n        return ans;\n    }\n};\n\nint main(){\n    Solution ob;\n    int n;\n    cin>>n;\n    vector<int>v;\n    for(int i=0;i<n;i++){\n        int k;\n        cin>>k;\n        v.push_back(k);\n    }\n    cout<<ob.trap(v);\n}\n"
    },
    {
      "questionid": "15",
      "difficulty": "15Medium",
      "description": "",
      "wrongcodefile": "15wrongcode.cpp",
      "rightcodefile": "15rightcode.cpp",
      "wrongcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n#include<bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> finalPrices(vector<int>& p) {\n        int n=p.size();\n        stack<int> s;\n        vector<int>d (n,-1);\n        for(int i=0;i<p.size();i++){\n            if(s.size()==0){\n                s.push(i);\n            }\n            else{\n                if(p[s.top()]>p[i]){\n                    while(!s.empty()&&p[s.top()]>=p[i]){\n                         d[s.top()]=i;\n                        s.pop();\n                    }\n                }\n                s.push(i);\n            }\n        }\n        vector<int>v;\n        for(int i=0;i<n;i++){\n            if(d[i]!=-1){\n                v.push_back(p[i]-p[d[i]]);\n            }\n            else{\n                v.push_back(p[i]);\n            }\n        }\n        return v;\n    }\n};\n\nint main(){\n    vector<int>v;\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        int t;\n        cin>>t;\n        v.push_back(t);\n    }\n    Solution ob;\n    vector<int>ans=ob.finalPrices(v);\n    for(int i=0;i < ans.size();i++){\n        cout<<ans[i]<<\" \";\n    }\n    return 0;\n}",
      "rightcode": "#include<iostream>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n// #include<bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> finalPrices(vector<int>& p) {\n        int n=p.size();\n        stack<int> s;\n        vector<int>d (n,-1);\n        for(int i=0;i<p.size();i++){\n            if(s.size()==0){\n                s.push(i);\n            }\n            else{ \n                if(p[s.top()]>=p[i]){\n                    while(!s.empty()&&p[s.top()]>=p[i]){\n                         d[s.top()]=i;\n                        s.pop();\n                    }\n                }\n                s.push(i);\n            }\n        }\n        vector<int>v;\n        for(int i=0;i<n;i++){\n            if(d[i]!=-1){\n                v.push_back(p[i]-p[d[i]]);\n            }\n            else{\n                v.push_back(p[i]);\n            }\n        }\n        return v;\n    }\n};\n\n\nint main(){\n    vector<int>v;\n    int n;\n    cin>>n;\n    for(int i=0;i<n;i++){\n        int t;\n        cin>>t;\n        v.push_back(t);\n    }\n    Solution ob;\n    vector<int>ans=ob.finalPrices(v);\n    for(int i=0;i < ans.size();i++){\n        cout<<ans[i]<<\" \";\n    }\n    return 0;\n}"
    }
  ]
}
